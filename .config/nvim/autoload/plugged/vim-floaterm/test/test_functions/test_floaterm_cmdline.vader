" vim:ft=vim

Execute(Test floaterm#cmdline#parse):
  let argstr ='--height=0.6 --width=0.4 --wintype=floating --name=floaterm1 --position=topleft --autoclose=2 ranger --cmd="cd ~"'
  let [cmd, opts] = floaterm#cmdline#parse(split(argstr))
  AssertEqual 'ranger --cmd="cd ~"', cmd
  AssertEqual {
    \'wintype': 'floating',
    \'name': 'floaterm1',
    \'autoclose': 2,
    \'width': 0.4,
    \'height': 0.6,
    \'position': 'topleft'
    \}, opts

Execute(Test floaterm#cmdline#parse expand feature):
  silent !touch test.txt && echo first.line > test.txt
  edit ./test.txt
  normal! gg0

  if $USER == 'runner'
    AssertEqual './test.txt', floaterm#cmdline#parse(split('%'))[0]
  else
    AssertEqual 'test.txt', floaterm#cmdline#parse(split('%'))[0]
  endif
  AssertEqual 'txt', floaterm#cmdline#parse(split('%:p:e'))[0]
  AssertEqual '\%', floaterm#cmdline#parse(split('\%'))[0]
  AssertEqual '\%:p:e', floaterm#cmdline#parse(split('\%:p:e'))[0]
  if $USER == 'runner'
    AssertEqual 'x./test.txtx', floaterm#cmdline#parse(split('x%x'))[0]
  else
    AssertEqual 'xtest.txtx', floaterm#cmdline#parse(split('x%x'))[0]
  endif
  AssertEqual 'xtxtx', floaterm#cmdline#parse(split('x%:p:ex'))[0]
  AssertEqual 'x\%x', floaterm#cmdline#parse(split('x\%x'))[0]
  AssertEqual 'x\%:p:ex', floaterm#cmdline#parse(split('x\%:p:ex'))[0]

  AssertEqual 'first.line', floaterm#cmdline#parse(split('<cfile>'))[0]
  AssertEqual 'line', floaterm#cmdline#parse(split('<cfile>:p:e'))[0]
  AssertEqual '\<cfile>', floaterm#cmdline#parse(split('\<cfile>'))[0]
  AssertEqual '\<cfile>:p:e', floaterm#cmdline#parse(split('\<cfile>:p:e'))[0]
  AssertEqual 'xfirst.linex', floaterm#cmdline#parse(split('x<cfile>x'))[0]
  AssertEqual 'xlinex', floaterm#cmdline#parse(split('x<cfile>:p:ex'))[0]
  AssertEqual 'x\<cfile>x', floaterm#cmdline#parse(split('x\<cfile>x'))[0]
  AssertEqual 'x\<cfile>:p:ex', floaterm#cmdline#parse(split('x\<cfile>:p:ex'))[0]

  silent !rm test.txt

Execute(Test floaterm#cmdline#complete):
  AssertEqual [
    \'--name=',
    \'--height=',
    \'--width=',
    \'--title=',
    \'--wintype=',
    \'--position=',
    \'--autoclose=',
    \], floaterm#cmdline#complete(v:null, 'FloatermNew ', 12)[:6]
  AssertEqual [
    \'--wintype=normal',
    \'--wintype=floating'
    \], floaterm#cmdline#complete(v:null, 'FloatermNew --wintype=', 22)
  AssertEqual [
    \'--wintype=normal',
    \], floaterm#cmdline#complete(v:null, 'FloatermNew --wintype=n', 23)
  AssertEqual [
    \'--position=top',
    \'--position=right',
    \'--position=bottom',
    \'--position=left',
    \'--position=center',
    \'--position=topleft',
    \'--position=topright',
    \'--position=bottomleft',
    \'--position=bottomright',
    \'--position=auto',
    \], floaterm#cmdline#complete(v:null, 'FloatermNew --position=', 23)
  AssertEqual [
    \'--position=top',
    \'--position=topleft',
    \'--position=topright',
    \], floaterm#cmdline#complete(v:null, 'FloatermNew --position=t', 24)
  AssertEqual [
    \'--name=',
    \'--height=',
    \'--width=',
    \'--title=',
    \'--wintype=',
    \'--position=',
    \'--autoclose=',
    \], floaterm#cmdline#complete(v:null, 'FloatermUpdate ', 15)

Execute(Test floaterm#cmdline#floaterm_names):
  FloatermNew --name=floaterm1
  AssertEqual ['floaterm1'], floaterm#cmdline#floaterm_names()

Execute(Test floaterm#cmdline#floaterm_names2):
  FloatermNew --name=floaterm2
  AssertEqual [
    \'--name=',
    \], floaterm#cmdline#floaterm_names2(v:null, 'FloatermSend ', 13)
  AssertEqual [
    \'--name=floaterm1',
    \'--name=floaterm2',
    \], floaterm#cmdline#floaterm_names2(v:null, 'FloatermSend --name=', 20)

Execute(Exit):
  stopinsert
  FloatermKill!
  sleep 100m
